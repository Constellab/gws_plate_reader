
from io import StringIO
from json import loads

import streamlit as st
from gws_biolector.biolector_xt_parser.biolectorxt_parser_dashboard import run
from gws_core import FileHelper, Settings
from pandas import DataFrame, read_table

# thoses variable will be set by the streamlit app
# don't initialize them, there are create to avoid errors in the IDE
sources: list
params: dict

"""
This dashboard is a micro-Saas that allows users to analyze Biolector data.
It is a standalone dashboard where user can upload their zip biolector XT data
and get the analysis of the data.
"""

if 'growth_rate_folder_path' not in st.session_state:
    st.session_state['growth_rate_folder_path'] = Settings.make_temp_dir()

table_file = None
json_file = None
if 'table' not in st.session_state or 'metadata' not in st.session_state:

    st.title("Biolector XT data parser app")
    st.text("""This app allows you to upload a Biolector XT data file and visualize the data.
The uploaded data are not stored and are only used to generate the dashboard.
It supports data generated by the Biolector XT device.
Refresh the page to upload new data.""")

    table_file = st.file_uploader("Upload the Biolector XT data csv file", type=["csv"])

    if table_file:
        extension = FileHelper.get_extension(table_file.name)

        if extension not in ["csv"]:
            raise Exception(f"The data file must be a csv file, but the provided file has the extension {extension}")

        table = read_table(table_file, sep=";", header=0, index_col=None)
        st.session_state['table'] = table

    json_file = st.file_uploader("Upload the BiolectorXT json metadata file (*BXT.json)", type=["json"])

    if json_file:

        extension = FileHelper.get_extension(json_file.name)

        if extension not in ["json"]:
            raise Exception(f"The data file must be a json file, but the provided file has the extension {extension}")

        # read the json file
        stringio = StringIO(json_file.getvalue().decode("utf-8"))
        string_data = stringio.read()

        try:
            metadata = loads(string_data)
            st.session_state['metadata'] = metadata
        except Exception as e:
            raise Exception(f"Error while loading the json file: {e}")

# after the selection of the second file, we rerun all the app to display only the dashboard
# and not the file uploader
if (table_file or json_file) and 'table' in st.session_state and 'metadata' in st.session_state:
    st.rerun()

if 'table' in st.session_state and 'metadata' in st.session_state:
    table: DataFrame = st.session_state['table']

    metadata = st.session_state['metadata']
    growth_rate_folder_path = st.session_state['growth_rate_folder_path']

    # run the dashboard
    run(table, metadata, growth_rate_folder_path)
